
(add-ns p (git-dependency "github.com:jduey/parser.git" "parser.toc"))
(add-ns sm (git-dependency "github.com:jduey/state-maybe.git" "state-maybe.toc"))
(add-ns fr (git-dependency "github.com:jduey/free.git" "free.toc"))

(defprotocol RecursiveDescent
  (recursive-descent [_]))

(defprotocol Ignored
  (ignore? [_] nothing))

(extend-type Function
  RecursiveDescent
  (recursive-descent [f]
    (sm/state-maybe (fn [& args]
                      (apply f (remove args ignore?))))))

(extend-type p/get-filename
  RecursiveDescent
  (recursive-descent [_]
    (sm/new-sm (fn [s]
                 (map (or (get s :file-name) (maybe ""))
                      (fn [file-name]
                        [file-name s]))))))

(extend-type p/get-linenumber
  RecursiveDescent
  (recursive-descent [_]
    (sm/new-sm (fn [s]
                 (map (or (get s :line-num) (maybe 0))
                      (fn [line-num ]
                        [line-num s]))))))

(extend-type p/inc-linenumber
  RecursiveDescent
  (recursive-descent [_]
    (sm/new-sm (fn [s]
                 (map (update-in s [:line-num] inc)
                      (fn [new-s]
                        [s new-s]))))))

(defn next-input-buffer [s]
  (for [input (get s :input)
        new-text (first input)]
    (comp s {:text new-text
             :input ((empty? new-text) empty-list (rest input))})))

(defn reader [n s]
  (let [text (get* s :text "" (sha1 :text) 0)
        text-length (count text)]
    (or (and (< n text-length)
             (maybe [(subs text 0 n)
                     (assoc s :text (subs text n))]))
        (and (= n text-length)
             (or (map (next-input-buffer s)
                      (fn [new-s]
                        [text new-s]))
                 (maybe [text (assoc s :text "")])))
        ;; (< text-length n)
        (for [new-s (next-input-buffer s)
              [texts final-s] (reader (- n text-length) new-s)]
          [(comp text texts) final-s]))))

(defn fn-reader [f s]
  (flat-map (get s :text)
            (fn [text]
              (let [length (f text)]
                ((= 0 length)
                 nothing
                 (or (and (= length (count text))
                          (for [new-s (next-input-buffer s)
                                [tail final-s] (fn-reader f new-s)]
                            [(cons text tail) final-s]))
                     (maybe [(list (subs text 0 length))
                             (assoc s :text (subs text length))])))))))

(extend-type p/parser-not-char
  RecursiveDescent
  (recursive-descent [p]
    (sm/new-sm (fn [s]
                 (for [[c new-s] (reader 1 s)
                       :when-not (= (.test-c p) c)]
                   [c new-s])))))

(extend-type p/parser-char-range
  RecursiveDescent
  (recursive-descent [p]
    (sm/new-sm (fn [s]
                 (for [[c new-s] (reader 1 s)
                       :when (< (dec (char-code (.lower p)))
                                (char-code c)
                                (inc (char-code (.higher p))))]
                   [c new-s])))))

;; (extend-type String
;;   RecursiveDescent
;;   (recursive-descent [p]
;;     (let [term-count (count p)]
;;       (sm/new-sm (fn [s]
;;                    (for [[text new-s] (reader term-count s)
;;                          :when (= text p)]
;;                      (list p new-s)))))))

(extend-type p/parser-terminal
  RecursiveDescent
  (recursive-descent [p]
    (let [term-str (.term-str p)
          term-count (count term-str)]
      (sm/new-sm (fn [s]
                   (for [[text new-s] (reader term-count s)
                         :when (= text term-str)]
                     [term-str new-s]))))))


(defn count-newlines [s]
  (inline-text Number "
int newlines = 0;
char *buffer = NULL;
if (arg0->type == SubStringType)
  buffer = ((SubString *)arg0)->buffer;
else if (arg0->type == StringType)
  buffer = ((String *)arg0)->buffer;
else
  abort();
for (int i = 0; i < ((String *)arg0)->len; i++) {
  if (buffer[i] == (char)10)
    newlines++;
}
return(numberValue(newlines));
"))

(extend-type p/parser-term-fn
  RecursiveDescent
  (recursive-descent [p]
    (sm/new-sm (fn [s]
                 (for [[str-list new-s] (fn-reader (.f p) s)
                       :let [line-count (reduce str-list 0 (fn [line-count s]
                                                             (+ line-count (count-newlines s))))]
                       new-s (update-in new-s [:line-num] (partial + line-count))]
                   [(to-str str-list) new-s])))))

(extend-type p/repeat-rule
  RecursiveDescent
  (recursive-descent [p]
    (flat-map (sm/recur (.rule p))
              (fn [[head & tail]]
                (sm/state-maybe (cons head tail))))))

(extend-type p/none-or-more-rule
  RecursiveDescent
  (recursive-descent [p]
    (comp (recursive-descent (p/repeat-rule (.rule p)))
          (recursive-descent (p/parser-always empty-list)))))

(extend-type p/ignore-rule
  RecursiveDescent
  (recursive-descent [p]
    (flat-map (.rule p)
              (fn [_]
                (sm/state-maybe (reify
                                  Stringable
                                  (string-list [_] (list "<Ignored>"))

                                  Ignored
                                  (ignore? [_] (maybe 'ignore))))))))

(extend-type p/parser-always
  RecursiveDescent
  (recursive-descent [p]
    (sm/state-maybe (.v p))))

(extend-type p/parser-rule
  RecursiveDescent
  (recursive-descent [p]
    (.grammar p)))

(extend-type p/recursive-parser-rule
  RecursiveDescent
  (recursive-descent [p]
    (let [parser (.grammar p)
          parser (sm/new-sm (fn [s] (parser s)))]
      (flat-map (sm/assoc-in-val [:parser-fns (.name p)] parser)
                (fn [_] parser)))))

(extend-type p/recursion-rule
  RecursiveDescent
  (recursive-descent [p]
    (flatten (sm/get-in-val [:parser-fns (.rule-name p)]))))

(extend-type p/Union
  RecursiveDescent
  (recursive-descent [u]
    (apply comp (.rules u))))

(extend-type p/Cat
  RecursiveDescent
  (recursive-descent [u]
    (apply* (recursive-descent list) (.rules u))))

(defn parser [grammar]
  (fr/evaluate grammar recursive-descent))
